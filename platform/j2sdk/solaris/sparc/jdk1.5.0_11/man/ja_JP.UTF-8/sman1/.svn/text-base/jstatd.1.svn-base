<!--ArborText, Inc., 1988-2003, v.4002-->
<!DOCTYPE REFENTRY PUBLIC "-//Sun Microsystems//DTD DocBook V3.0-Based SolBook Subset V2.0//EN" [
<!ENTITY % javaents SYSTEM "javaman.ent">
%javaents;
]>
<?Pub UDT _bookmark _target>
<?APT Element gi="refentrytitle">
<?APT Element gi="manvolnum">
<?APT Element gi="refmiscinfo" attrs="class">
<?APT Element gi="refmeta">
<?APT Element gi="refname">
<?APT Element gi="refpurpose">
<?APT Element gi="refnamediv">
<?APT Element gi="title">
<?APT Element gi="command">
<?APT Element gi="replaceable">
<?APT Element gi="arg" attrs="choice">
<?APT Element gi="cmdsynopsis">
<?APT Element gi="refsynopsisdiv">
<?APT Element gi="term">
<?APT Element gi="para">
<?APT Element gi="listitem">
<?APT Element gi="varlistentry">
<?APT Element gi="variablelist" attrs="termlength">
<?APT Element gi="refsect1">
<?APT Element gi="primary" attrs="sortas">
<?APT Element gi="indexterm" attrs="id">
<?APT Element gi="option">
<?APT Element gi="note">
<?APT Element gi="literal">
<?APT Element gi="screen">
<?APT Element gi="example">
<?APT Element gi="citerefentry">
<?APT Element gi="refentry" attrs="id">
<?Pub Inc>
<refentry id="jstatd-1"> <!--@(#)jstatd.1	1.1 04/06/15--><refmeta><refentrytitle>
jstatd</refentrytitle><manvolnum>1</manvolnum><refmiscinfo class="date">
2004 年 6 月 22 日</refmiscinfo><refmiscinfo class="sectdesc">&man1;</refmiscinfo><refmiscinfo
class="software">&java-release;</refmiscinfo><refmiscinfo class="arch">generic</refmiscinfo><refmiscinfo
class="copyright"> Copyright 2004 Sun Microsystems, Inc. All rights reserved.  Copyright 2004 Sun Microsystems, Inc. Tous droits r&eacute;serv&eacute;s.</refmiscinfo></refmeta><refnamediv><refname>
jstatd</refname><refpurpose>仮想マシン jstat デーモン</refpurpose></refnamediv><refsynopsisdiv><title>&synp-tt;</title><cmdsynopsis><command>
jstatd</command><arg choice="opt"><replaceable>[ options ]</replaceable></arg></cmdsynopsis></refsynopsisdiv><refsect1><title>&parm-tt;</title><variablelist
termlength="narrow"><varlistentry><term><replaceable>options</replaceable> </term><listitem><para>
コマンド行オプション。オプションは任意の順序で指定できます。冗長または矛盾するオプションがあった場合は、最後に指定されたオプションが優先されます。</para></listitem></varlistentry></variablelist></refsect1><refsect1><title
>&desc-tt;</title><indexterm id="java-1-indx-1"><primary sortas="Java interpreter">
Java インタープリタ&mdash; java</primary></indexterm><indexterm id="java-1-indx-2"><primary
sortas="java"> java &mdash; Java インタープリタ</primary></indexterm><para>jstatd
ツールは、計測機構付き HotSpot Java 仮想マシン (JVM) の作成と終了を監視する RMI サーバアプリケーションであり、リモート監視ツールがローカルホスト上で実行している
JVM にアタッチするためのインタフェースを備えています。</para><para>jstatd サーバが機能するためには、ローカルホスト上に RMI
レジストリが存在する必要があります。jstatd サーバは、デフォルトポートまたは <option>p <replaceable>port</replaceable></option> オプションによって示されたポート上の
RMI レジストリへのアタッチを試みます。RMI レジストリが見つからなかった場合は、<option>p <replaceable>port</replaceable></option> オプションによって示されたポート、または <option>p <replaceable>port</replaceable></option> が省かれた場合はデフォルトの RMI レジストリにバインドされた
jstatd アプリケーション内で作成されます。内部 RMI レジストリの作成は、<option>nr</option> オプションを指定することによって禁止できます。</para><note><para>
このユーティリティはサポートされていないため、JDK の将来のバージョンでは使用できない可能性があります。現時点では、Windows
98 および Windows ME プラットフォームでは使用できません。</para></note></refsect1><refsect1><title>&opts-tt;</title><para>
jstatd コマンドは、以下のオプションをサポートします。</para><variablelist><varlistentry><term>&mdash;nr</term><listitem><para>
既存の RMI レジストリが見つからないときに、jstatd プロセス内での内部 RMI レジストリの作成を試みません。</para></listitem></varlistentry><varlistentry><term>
-p<replaceable> port</replaceable></term><listitem><para>RMI レジストリを探すポート番号。または、RMI
レジストリが見つからず、<option>nr</option> が指定されなかった場合に、RMI レジストリが作成されるポート番号</para></listitem></varlistentry><varlistentry><term>
-n<replaceable> rminame</replaceable></term><listitem><para>RMI レジストリでリモート
RMI オブジェクトがバインドされる名前。デフォルトの名前は、<literal>JStatRemoteHost</literal> です。同じホスト上で複数の
jstatd サーバが起動している場合、各サーバのエクスポート RMI オブジェクトの名前を一意にするには、このオプションを指定します。ただし、そのためには、監視クライアントの
hostid および vmid 文字列に一意なサーバ名が含まれている必要があります。</para></listitem></varlistentry><varlistentry><term>
-J<replaceable>option</replaceable></term><listitem><para><replaceable>option</replaceable> を
javac によって呼び出された java 起動ツールに渡します。たとえば、<literal>-J-Xms48m</literal> は、起動メモリを
48MB に設定します。Java で作成された下層の VM 実行アプリケーションにオプションを渡すのが、-J の一般的規則です。</para></listitem></varlistentry></variablelist></refsect1><refsect1><title>
セキュリティ</title><para>jstatd サーバは、他にセキュリティマネージャがインストールされていない場合は、RMISecurityPolicy
のインスタンスをインストールするので、セキュリティポリシーファイルを指定する必要があります。ポリシーファイルは、デフォルトのポリシー実装のポリシーファイル構文に従う必要があります。ポリシーファイルは、<option>
-J-Djava.security.policy=<replaceable>file</replaceable> </option> で指定できます。</para><para>
次のポリシーファイルでは、jstatd サーバはセキュリティ例外を起こさずに実行できます。このポリシーは、すべてのコードベースへのすべてのアクセス権を許可するよりは自由度が低いですが、jstatd
サーバの実行に必要な最小限度のアクセス権を許可するポリシーよりは自由度が高いです。<screen>grant codebase "file:${java.home}/../lib/tools.jar"
{              permission java.security.AllPermission;           };</screen></para><para>
このポリシーを使用するには、テキストを <literal> jstatd.all.policy</literal> という名前のファイルにコピーした後、次のようにして
jstatd サーバを実行します。<screen>jstatd -J-Djava.security.policy=jstatd.all.policy</screen></para><para>
より厳格なセキュリティを採用しているサイトでは、具体的なニーズに合わせて jstatd セキュリティポリシーをカスタマイズすることをお奨めします。</para><para>
jstatd サーバは、適切なアクセス権を持っている JVM だけを監視できます。ただし、jstatd はユーザレベルの認証や承認チェックは行いません。したがって、jstatd
サーバが適切なアクセス権を持っている JVM によってエクスポートされた計測機構へのアクセスを開きます。これにより、ネットワーク上の任意のユーザが、通常はアクセスできない
JVM でも監視できます。環境によっては、このような露出が受け入れられない場合もあります。UNIX ベースのシステム上で root アクセス権でサーバを実行するなど、幅広い露出が可能な資格で jstatd サーバを実行するときには、特に注意してください。</para><para>jstatd サーバによってもたらされる露出をなくすには、サーバを実行しないことですが、そのためには、あらゆる監視活動をローカルで行う必要があります。あるいは、セキュリティポリシーファイルをカスタマイズして、アクセスを特定の信頼できるホストに制限してください。</para
></refsect1><refsect1><title>リモートインタフェース</title><para>jstatd プロセスによってエクスポートされるインタフェースはプロプライエタリであり、変更が保証されています。ユーザおよび開発者は、このインタフェースに書き込まないようにしてください。</para
></refsect1><refsect1><title>例</title><para>jstatd の起動例をいくつか示します。これらの jstatd
スクリプトは、バックグラウンドで自動的にサーバを起動します。</para><example><title>内部 RMI レジストリの使用</title><para>
この例は、内部 RMI レジストリを使用した jstatd の起動を示しています。この例では、他のサーバがデフォルトの RMI レジストリポート (ポート
1099) にバインドされていないことを前提としています。<screen>jstatd -J-Djava.security.policy=all.policy</screen></para></example><example><title>
外部 RMI レジストリの使用</title><para>この例は、外部 RMI レジストリを使用した jstatd の起動を示しています。 <screen>
rmiregistry&amp;
jstatd -J-Djava.security.policy=all.policy</screen></para> 
<para>この例は、ポート 2020 上の外部 RMI レジストリサーバを使用した jstatd の起動を示しています。<screen>rmiregistry 2020&amp;
jstatd -J-Djava.security.policy=all.policy -p 2020</screen></para>


<para>この例は、ポート 2020 上の、<literal>lternateJstatdServerName</literal> という名前にバインドされた外部
RMI レジストリを使用した jstatd の起動を示しています。<screen>
rmiregistry 2020&amp;
jstatd -J-Djava.security.policy=all.policy -p 2020 -n AlternateJstatdServerName
</screen></para>
</example><example><title>
プロセス内 RMI レジストリの作成の禁止</title><para>この例は、RMI レジストリが見つからない場合も RMI レジストリを作成しないように
jstatd を起動する例を示しています。この例では、RMI がすでに実行していることを前提としています。実行していなかった場合は、適切なエラーメッセージが表示されます。<screen>
jstatd -nr</screen></para></example><example><title> RMI ロギング機能の有効化</title><para>
この例は、RMI ロギング機能を有効にして jstatd を起動する例を示しています。この方法は、障害追跡やサーバ活動の監視に役立ちます。<screen>
jstatd -J-Djava.security.policy=all.policy -J-Djava.rmi.server.logCalls=true</screen></para><para>
この例では、環境変数を設定するための Bourne Shell 構文を使用しています。他のシェルやコマンドインタープリタでは別の構文が必要な場合があります。<?Pub Caret></para></example></refsect1><refsect1><title>&also-tt;</title
><para><citerefentry><refentrytitle>java</refentrytitle><manvolnum>1</manvolnum></citerefentry>, <citerefentry><refentrytitle>
jps</refentrytitle><manvolnum>1</manvolnum></citerefentry>, <citerefentry><refentrytitle>
jstat</refentrytitle><manvolnum>1</manvolnum></citerefentry>, <citerefentry><refentrytitle>
rmiregistry</refentrytitle><manvolnum>1</manvolnum></citerefentry></para></refsect1></refentry>
